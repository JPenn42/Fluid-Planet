#pragma kernel CSMain
#pragma kernel Terraform

#include "FractalNoise.hlsl"


RWTexture3D<float> DensityMap;
uint resolution;
float3 worldSize;
float3 worldCentre;
float radius;

int numLayers;
float lacunarity;
float persistence;
float noiseScale;
float noiseStrength;
float noiseOffset;

float3 rayOrigin;
float3 rayDir;
float terraformStrength;
float terraformRadius;
float deltaTime;
float3 noisePositionOffset;

float fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos)
{
    float noise = 0;
    float frequency = scale / 100;
    float amplitude = 1;

    for (int i = 0; i < numLayers; i++)
    {
        float n = 1 - abs(snoise(pos * frequency) * 2 - 1);
        //n*=n;
        noise += n * amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return noise;
}

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= resolution)) return;

    float3 uvw = id / (resolution - 1.0);
    float3 pos = worldCentre + (uvw - 0.5) * worldSize;

    float density = length(pos) - radius;

    // density += (continentNoise(pos, 4, 0.5, 2, noiseScale) - 0.5) * noiseStrength;
    density += (fbm(numLayers, lacunarity, persistence, noiseScale, pos + noisePositionOffset) - noiseOffset) * noiseStrength;

    DensityMap[id] = density;
}

[numthreads(8,8,8)]
void Terraform(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= resolution)) return;

    float3 uvw = id / (resolution - 1.0);
    float3 idPos = worldCentre + (uvw - 0.5) * worldSize;

    // Find intersection
    float3 pos = rayOrigin;


    while (true)
    {
        uvw = (pos - worldCentre) / worldSize + 0.5;
        if (any(uvw >= 1) || any(uvw <= 0)) break;

        uint3 texCoordTest = uint3(uvw * resolution);

        float val = DensityMap[texCoordTest];
        if (val < 0)
        {
            break;
        }
        pos += rayDir;
    }
    

    float rT = length(pos - idPos) / terraformRadius;
    
    if (rT <= 1)
    {
        float w = (1-rT) * (1-rT);
        DensityMap[id] += terraformStrength * deltaTime * w;
    }
}
